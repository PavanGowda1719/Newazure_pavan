{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"workspaceName": {
			"type": "string",
			"metadata": "Workspace name",
			"defaultValue": "synaspe-northeurope-projects"
		},
		"AzureDataLakeStorage_newproject_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'AzureDataLakeStorage_newproject'"
		},
		"AzureSqlDatabase_newproject_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'AzureSqlDatabase_newproject'"
		},
		"synaspe-northeurope-projects-WorkspaceDefaultSqlServer_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'synaspe-northeurope-projects-WorkspaceDefaultSqlServer'",
			"defaultValue": "Integrated Security=False;Encrypt=True;Connection Timeout=30;Data Source=tcp:synaspe-northeurope-projects.sql.azuresynapse.net,1433;Initial Catalog=@{linkedService().DBName}"
		},
		"AzureDataLakeStorage_newproject_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://adlsaccountnortheurope.dfs.core.windows.net/"
		},
		"AzureSqlDatabase_newproject_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "sqlservernortheurope-1.database.windows.net"
		},
		"AzureSqlDatabase_newproject_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "databasenortheurope"
		},
		"AzureSqlDatabase_newproject_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "Pavan"
		},
		"synaspe-northeurope-projects-WorkspaceDefaultStorage_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://adlsaccountnortheurope.dfs.core.windows.net"
		}
	},
	"variables": {
		"workspaceId": "[concat('Microsoft.Synapse/workspaces/', parameters('workspaceName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('workspaceName'), '/CopyPipeline_sample')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "ForEach_ver",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.cw_items",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy_ver",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [
										{
											"name": "Source",
											"value": "fintech.@{item().source.table}"
										},
										{
											"name": "Destination",
											"value": "sample-datalake//@{item().destination.fileName}"
										}
									],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"partitionOption": "None"
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"validateDataConsistency": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "SourceDataset_ver",
											"type": "DatasetReference",
											"parameters": {
												"cw_table": "@item().source.table"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DestinationDataset_ver",
											"type": "DatasetReference",
											"parameters": {
												"cw_fileName": "@item().destination.fileName"
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"cw_items": {
						"type": "Array",
						"defaultValue": [
							{
								"source": {
									"table": "Accounts"
								},
								"destination": {
									"fileName": "fintech.Accounts.Parquet"
								}
							},
							{
								"source": {
									"table": "Customers"
								},
								"destination": {
									"fileName": "fintech.Customers.Parquet"
								}
							},
							{
								"source": {
									"table": "Loans"
								},
								"destination": {
									"fileName": "fintech.Loans.Parquet"
								}
							},
							{
								"source": {
									"table": "Payments"
								},
								"destination": {
									"fileName": "fintech.Payments.Parquet"
								}
							},
							{
								"source": {
									"table": "Transactions"
								},
								"destination": {
									"fileName": "fintech.Transactions.Parquet"
								}
							}
						]
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/SourceDataset_ver')]",
				"[concat(variables('workspaceId'), '/datasets/DestinationDataset_ver')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Pipeline_fintech_project')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Lookup_sql_table",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT \n    TABLE_SCHEMA AS SchemaName,\n    TABLE_NAME AS TableName\nFROM \n    INFORMATION_SCHEMA.TABLES\nWHERE \n    TABLE_TYPE = 'BASE TABLE' and TABLE_SCHEMA = 'fintech'\nORDER BY \n    SchemaName, TableName;",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSql_dataset_newproject",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach_fintech",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup_sql_table",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup_sql_table').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Copy_data_fintech",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "@concat('select * from ', item().SchemaName,'.',item().TableName)\n",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "AzureSql_dataset_newproject",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "adlsstorage_dataset_new_project",
											"type": "DatasetReference",
											"parameters": {
												"Tablename": {
													"value": "@item().TableName",
													"type": "Expression"
												},
												"Schema": {
													"value": "@item().SchemaName",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "BRONZE TO SILVER LAYER",
						"type": "SynapseNotebook",
						"dependsOn": [
							{
								"activity": "ForEach_fintech",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebook": {
								"referenceName": "BRONZE TO SILVER LAYER_FINTECH",
								"type": "NotebookReference"
							},
							"snapshot": true,
							"sparkPool": {
								"referenceName": "sparkpool1",
								"type": "BigDataPoolReference"
							},
							"executorSize": "Small",
							"conf": {
								"spark.dynamicAllocation.enabled": false
							},
							"driverSize": "Small"
						}
					},
					{
						"name": "Silver_Gold_Layer_Fintech",
						"type": "SynapseNotebook",
						"dependsOn": [
							{
								"activity": "BRONZE TO SILVER LAYER",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebook": {
								"referenceName": "Silver_Gold_Layer_Fintech",
								"type": "NotebookReference"
							},
							"snapshot": true,
							"sparkPool": {
								"referenceName": "sparkpool1",
								"type": "BigDataPoolReference"
							},
							"executorSize": "Small",
							"conf": {
								"spark.dynamicAllocation.enabled": false,
								"spark.dynamicAllocation.minExecutors": null,
								"spark.dynamicAllocation.maxExecutors": null
							},
							"driverSize": "Small",
							"numExecutors": null
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/AzureSql_dataset_newproject')]",
				"[concat(variables('workspaceId'), '/notebooks/BRONZE TO SILVER LAYER_FINTECH')]",
				"[concat(variables('workspaceId'), '/bigDataPools/sparkpool1')]",
				"[concat(variables('workspaceId'), '/notebooks/Silver_Gold_Layer_Fintech')]",
				"[concat(variables('workspaceId'), '/datasets/adlsstorage_dataset_new_project')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/pipeline-3')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT \n    TABLE_SCHEMA AS SchemaName,\n    TABLE_NAME AS TableName\nFROM \n    INFORMATION_SCHEMA.TABLES\nWHERE \n    TABLE_TYPE = 'BASE TABLE' and TABLE_SCHEMA = 'fintech'\nORDER BY \n    SchemaName, TableName;",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSql_dataset_newproject",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach-sample",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup1').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copydata-sample",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "@concat('select * from ', item().SchemaName, '.', item().TableName)",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "AzureSql_dataset_newproject",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "adlsstorage_dataset_new_project",
											"type": "DatasetReference",
											"parameters": {
												"Tablename": {
													"value": "@item().TableName",
													"type": "Expression"
												},
												"Schema": {
													"value": "@item().SchemaName",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "Notebook1",
						"type": "SynapseNotebook",
						"dependsOn": [
							{
								"activity": "ForEach-sample",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebook": {
								"referenceName": "BRONZE TO SILVER LAYER_FINTECH",
								"type": "NotebookReference"
							},
							"snapshot": true,
							"sparkPool": {
								"referenceName": "sparkpool1",
								"type": "BigDataPoolReference"
							},
							"executorSize": "Small",
							"conf": {
								"spark.dynamicAllocation.enabled": false
							},
							"driverSize": "Small"
						}
					},
					{
						"name": "Notebook2",
						"type": "SynapseNotebook",
						"dependsOn": [
							{
								"activity": "Notebook1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebook": {
								"referenceName": "Silver_Gold_Layer_Fintech",
								"type": "NotebookReference"
							},
							"snapshot": true,
							"sparkPool": {
								"referenceName": "sparkpool1",
								"type": "BigDataPoolReference"
							},
							"executorSize": "Small",
							"conf": {
								"spark.dynamicAllocation.enabled": false
							},
							"driverSize": "Small"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/AzureSql_dataset_newproject')]",
				"[concat(variables('workspaceId'), '/notebooks/BRONZE TO SILVER LAYER_FINTECH')]",
				"[concat(variables('workspaceId'), '/bigDataPools/sparkpool1')]",
				"[concat(variables('workspaceId'), '/notebooks/Silver_Gold_Layer_Fintech')]",
				"[concat(variables('workspaceId'), '/datasets/adlsstorage_dataset_new_project')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AzureSql_dataset_newproject')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase_newproject",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureSqlDatabase_newproject')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DestinationDataset_ver')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage_newproject",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_fileName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().cw_fileName",
							"type": "Expression"
						},
						"fileSystem": "sample-datalake"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureDataLakeStorage_newproject')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SourceDataset_ver')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase_newproject",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_table": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "fintech",
					"table": {
						"value": "@dataset().cw_table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureSqlDatabase_newproject')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/adlsstorage_dataset_new_project')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage_newproject",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Tablename": {
						"type": "string"
					},
					"Schema": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@concat(dataset().Tablename, '.parquet')",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@concat('Bronze/',dataset().Schema, '/', dataset().Tablename)",
							"type": "Expression"
						},
						"fileSystem": "fintech"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureDataLakeStorage_newproject')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AzureDataLakeStorage_newproject')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('AzureDataLakeStorage_newproject_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('AzureDataLakeStorage_newproject_accountKey')]"
					}
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AzureSqlDatabase_newproject')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"server": "[parameters('AzureSqlDatabase_newproject_properties_typeProperties_server')]",
					"database": "[parameters('AzureSqlDatabase_newproject_properties_typeProperties_database')]",
					"encrypt": "mandatory",
					"trustServerCertificate": false,
					"authenticationType": "SQL",
					"userName": "[parameters('AzureSqlDatabase_newproject_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('AzureSqlDatabase_newproject_password')]"
					}
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/synaspe-northeurope-projects-WorkspaceDefaultSqlServer')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"DBName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('synaspe-northeurope-projects-WorkspaceDefaultSqlServer_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/synaspe-northeurope-projects-WorkspaceDefaultStorage')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('synaspe-northeurope-projects-WorkspaceDefaultStorage_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AutoResolveIntegrationRuntime')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 0
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/WorkspaceSystemIdentity')]",
			"type": "Microsoft.Synapse/workspaces/credentials",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "ManagedIdentity",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 1')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "SELECT TOP (100) [account_id]\n,[account_type]\n,[balance]\n,[open_date]\n,[account_age_years]\n FROM [Database1].[dbo].[accounts]",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "Database1",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/BRONZE TO SILVER LAYER_FINTECH')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "sparkpool1",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "96838ca7-467b-4922-b0b5-c75d6856f02e"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/4b8e657e-a5ee-47f9-85b2-8b4bf5f84802/resourceGroups/north_europe_1/providers/Microsoft.Synapse/workspaces/synaspe-northeurope-projects/bigDataPools/sparkpool1",
						"name": "sparkpool1",
						"type": "Spark",
						"endpoint": "https://synaspe-northeurope-projects.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/sparkpool1",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.4",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#### **BRONZE TO SILVER LAYER**"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"\r\n",
							"\r\n",
							"from pyspark.sql.functions import *\r\n",
							"\r\n",
							"# Define paths\r\n",
							"base_path = \"abfss://fintech@adlsaccountnortheurope.dfs.core.windows.net/Bronze/fintech/\"\r\n",
							"output_base_path = \"abfss://fintech@adlsaccountnortheurope.dfs.core.windows.net/Silver/fintech/\"\r\n",
							"\r\n",
							"spark.conf.set(\"spark.databricks.delta.schema.autoMerge.enabled\", \"true\")\r\n",
							"\r\n",
							"# Transformation for Accounts dataset\r\n",
							"def transform_accounts():\r\n",
							"    df = spark.read.parquet(f\"{base_path}Accounts/Accounts.parquet\")\r\n",
							"    # Example transformation: Calculate account age in years\r\n",
							"    df_transformed = df.withColumn(\"AccountAgeYears\", \r\n",
							"                                   round(datediff(current_date(), col(\"OpenDate\")) / 365.25, 2))\r\n",
							"    df_transformed.write.format(\"delta\").mode(\"overwrite\").save(f\"{output_base_path}Accounts/\")\r\n",
							"\r\n",
							"# Transformation for Customers dataset\r\n",
							"def transform_customers():\r\n",
							"    df = spark.read.parquet(f\"{base_path}Customers/Customers.parquet\")\r\n",
							"    # Example transformation: Create a full name column and mask the email address\r\n",
							"    df_transformed = df.withColumn(\"FullName\", concat_ws(\" \", col(\"FirstName\"), col(\"LastName\"))) \\\r\n",
							"                       .withColumn(\"MaskedEmail\", \r\n",
							"                                   concat(lit(\"***@\"), substring_index(col(\"Email\"), \"@\", -1)))\r\n",
							"    df_transformed.write.format(\"delta\").mode(\"overwrite\").save(f\"{output_base_path}Customers/\")\r\n",
							"\r\n",
							"# Transformation for Loans dataset with explicit casting\r\n",
							"def transform_loans():\r\n",
							"    df = spark.read.parquet(f\"{base_path}Loans/Loans.parquet\")\r\n",
							"    # Example transformation: Calculate total interest with explicit casting to match the Delta table\r\n",
							"    df_transformed = df.withColumn(\"TotalInterest\", \r\n",
							"                                   (col(\"LoanAmount\") * col(\"InterestRate\") / 100).cast(\"decimal(28,8)\")) \\\r\n",
							"                       .withColumn(\"LoanDurationYears\", \r\n",
							"                                   round(datediff(col(\"LoanEndDate\"), col(\"LoanStartDate\")) / 365.25, 2))\r\n",
							"    df_transformed.write.format(\"delta\").mode(\"overwrite\").save(f\"{output_base_path}Loans/\")\r\n",
							"\r\n",
							"# Transformation for Payments dataset\r\n",
							"def transform_payments():\r\n",
							"    df = spark.read.parquet(f\"{base_path}Payments/Payments.parquet\")\r\n",
							"    # Example transformation: Calculate days since last payment\r\n",
							"    df_transformed = df.withColumn(\"DaysSinceLastPayment\", \r\n",
							"                                   datediff(current_date(), col(\"PaymentDate\")))\r\n",
							"    df_transformed.write.format(\"delta\").mode(\"overwrite\").save(f\"{output_base_path}Payments/\")\r\n",
							"\r\n",
							"# Transformation for Transactions dataset\r\n",
							"def transform_transactions():\r\n",
							"    df = spark.read.parquet(f\"{base_path}Transactions/Transactions.parquet\")\r\n",
							"    # Example transformation: Categorize transaction types\r\n",
							"    df_transformed = df.withColumn(\"TransactionCategory\", \r\n",
							"                                   when(col(\"TransactionType\") == \"Deposit\", \"Income\")\r\n",
							"                                   .when(col(\"TransactionType\") == \"Withdrawal\", \"Expense\")\r\n",
							"                                   .otherwise(\"Other\"))\r\n",
							"    df_transformed.write.format(\"delta\").mode(\"overwrite\").save(f\"{output_base_path}Transactions/\")\r\n",
							"\r\n",
							"# Process each table\r\n",
							"transform_accounts()\r\n",
							"transform_customers()\r\n",
							"transform_loans()\r\n",
							"transform_payments()\r\n",
							"transform_transactions()\r\n",
							"\r\n",
							"print(\"Bronze To Silver Completed !!\")\r\n",
							""
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Notebook 1')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "sparkpool1",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "8c80ae66-21bb-492d-8bb5-98a8fb179a5d"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/4b8e657e-a5ee-47f9-85b2-8b4bf5f84802/resourceGroups/north_europe_1/providers/Microsoft.Synapse/workspaces/synaspe-northeurope-projects/bigDataPools/sparkpool1",
						"name": "sparkpool1",
						"type": "Spark",
						"endpoint": "https://synaspe-northeurope-projects.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/sparkpool1",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.4",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28,
						"automaticScaleJobs": false
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"microsoft": {
								"language": "python"
							}
						},
						"source": [
							"%%pyspark\n",
							"df = spark.sql(\"SELECT * FROM `Database1`.`accounts`\")\n",
							"df.show(10)"
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"lake_db_path = \"abfss://fintech@adlsaccountnortheurope.dfs.core.windows.net/Gold/fintech/\"\r\n",
							"table_name = \"dim_customers\"\r\n",
							"lake_database_name = \"Database1\"  # Replace with your Lake Database name\r\n",
							"\r\n",
							"# Register the table\r\n",
							"spark.sql(f\"\"\"\r\n",
							"CREATE TABLE IF NOT EXISTS {lake_database_name}.{table_name}\r\n",
							"USING DELTA\r\n",
							"LOCATION '{lake_db_path}{table_name}'\r\n",
							"\"\"\")\r\n",
							"\r\n",
							"\r\n",
							""
						],
						"outputs": [],
						"execution_count": 4
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Silver_Gold_Layer_Fintech')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "sparkpool1",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "875fd45f-4080-4714-aa1e-6673239e8fa8"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/4b8e657e-a5ee-47f9-85b2-8b4bf5f84802/resourceGroups/north_europe_1/providers/Microsoft.Synapse/workspaces/synaspe-northeurope-projects/bigDataPools/sparkpool1",
						"name": "sparkpool1",
						"type": "Spark",
						"endpoint": "https://synaspe-northeurope-projects.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/sparkpool1",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.4",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"##### **Reading_data_from_silver_layer**"
						]
					},
					{
						"cell_type": "code",
						"source": [
							"from pyspark.sql.functions import *\r\n",
							"\r\n",
							"# Define paths\r\n",
							"silver_base_path = \"abfss://fintech@adlsaccountnortheurope.dfs.core.windows.net/Silver/fintech/\"\r\n",
							"output_base_path = \"abfss://fintech@adlsaccountnortheurope.dfs.core.windows.net/Gold/fintech/\"\r\n",
							"\r\n",
							"# Load data from the silver layer\r\n",
							"accounts_df = spark.read.format(\"delta\").load(f\"{silver_base_path}Accounts/\")\r\n",
							"customers_df = spark.read.format(\"delta\").load(f\"{silver_base_path}Customers/\")\r\n",
							"loans_df = spark.read.format(\"delta\").load(f\"{silver_base_path}Loans/\")\r\n",
							"payments_df = spark.read.format(\"delta\").load(f\"{silver_base_path}Payments/\")\r\n",
							"transactions_df = spark.read.format(\"delta\").load(f\"{silver_base_path}Transactions/\")\r\n",
							"\r\n",
							""
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"##### **customers_df**"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"dim_customers_df = customers_df.select(\r\n",
							"    col(\"CustomerID\").alias(\"customer_id\"),\r\n",
							"    col(\"FirstName\").alias(\"first_name\"),\r\n",
							"    col(\"LastName\").alias(\"last_name\"),\r\n",
							"    col(\"Email\").alias(\"email\"),\r\n",
							"    col(\"PhoneNumber\").alias(\"phone_number\"),\r\n",
							"    col(\"Address\").alias(\"address\"),\r\n",
							"    col(\"City\").alias(\"city\"),\r\n",
							"    col(\"State\").alias(\"state\"),\r\n",
							"    col(\"Country\").alias(\"country\"),\r\n",
							"    col(\"ZipCode\").alias(\"zip_code\"),\r\n",
							"    col(\"SignupDate\").alias(\"signup_date\")\r\n",
							")\r\n",
							"\r\n",
							"dim_customers_df.write.format(\"delta\").mode(\"overwrite\").save(f\"{output_base_path}dim_customers/\")\r\n",
							""
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"##### **accounts_df**"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"dim_accounts_df = accounts_df.select(\r\n",
							"    col(\"AccountID\").alias(\"account_id\"),\r\n",
							"    col(\"AccountType\").alias(\"account_type\"),\r\n",
							"    col(\"Balance\").alias(\"balance\"),\r\n",
							"    col(\"OpenDate\").alias(\"open_date\"),\r\n",
							"    col(\"AccountAgeYears\").alias(\"account_age_years\")\r\n",
							")\r\n",
							"\r\n",
							"dim_accounts_df.write.format(\"delta\").mode(\"overwrite\").save(f\"{output_base_path}dim_accounts/\")\r\n",
							""
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"****"
						]
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"##### **loans_df**"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"dim_loans_df = loans_df.select(\r\n",
							"    col(\"LoanID\").alias(\"loan_id\"),\r\n",
							"    col(\"LoanType\").alias(\"loan_type\"),\r\n",
							"    col(\"LoanAmount\").alias(\"loan_amount\"),\r\n",
							"    col(\"InterestRate\").alias(\"interest_rate\"),\r\n",
							"    col(\"LoanStartDate\").alias(\"loan_start_date\"),\r\n",
							"    col(\"LoanEndDate\").alias(\"loan_end_date\"),\r\n",
							"    col(\"TotalInterest\").alias(\"total_interest\"),\r\n",
							"    col(\"LoanDurationYears\").alias(\"loan_duration_years\")\r\n",
							")\r\n",
							"\r\n",
							"dim_loans_df.write.format(\"delta\").mode(\"overwrite\").save(f\"{output_base_path}dim_loans/\")\r\n",
							""
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"##### **payments_df**"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"fact_payments_df = payments_df \\\r\n",
							"    .join(loans_df.select(\"LoanID\", \"CustomerID\"), \"LoanID\") \\\r\n",
							"    .select(\r\n",
							"        col(\"PaymentID\").alias(\"payment_id\"),\r\n",
							"        col(\"LoanID\").alias(\"loan_id\"),\r\n",
							"        col(\"CustomerID\").alias(\"customer_id\"),\r\n",
							"        col(\"PaymentDate\").alias(\"payment_date\"),\r\n",
							"        col(\"PaymentAmount\").alias(\"payment_amount\"),\r\n",
							"        col(\"PaymentMethod\").alias(\"payment_method\")\r\n",
							"    )\r\n",
							"\r\n",
							"fact_payments_df.write.format(\"delta\").mode(\"overwrite\").save(f\"{output_base_path}fact_payments/\")\r\n",
							""
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"##### **transactions_df**"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"fact_transactions_df = transactions_df \\\r\n",
							"    .join(accounts_df.select(\"AccountID\", \"CustomerID\"), \"AccountID\") \\\r\n",
							"    .select(\r\n",
							"        col(\"TransactionID\").alias(\"transaction_id\"),\r\n",
							"        col(\"AccountID\").alias(\"account_id\"),\r\n",
							"        col(\"CustomerID\").alias(\"customer_id\"),\r\n",
							"        col(\"TransactionDate\").alias(\"transaction_date\"),\r\n",
							"        col(\"Amount\").alias(\"amount\"),\r\n",
							"        col(\"TransactionType\").alias(\"transaction_type\"),\r\n",
							"        col(\"Description\").alias(\"description\")\r\n",
							"    )\r\n",
							"\r\n",
							"fact_transactions_df.write.format(\"delta\").mode(\"overwrite\").save(f\"{output_base_path}fact_transactions/\")\r\n",
							""
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Database1')]",
			"type": "Microsoft.Synapse/workspaces/databases",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"Ddls": [
					{
						"ActionType": "CREATE",
						"OldEntity": null,
						"NewEntity": {
							"Name": "Database1",
							"EntityType": "DATABASE",
							"Origin": {
								"Type": "SPARK"
							},
							"Properties": {
								"IsSyMSCDMDatabase": true
							},
							"Source": {
								"Provider": "ADLS",
								"Location": "abfss://synapse@adlsaccountnortheurope.dfs.core.windows.net/Database1",
								"Properties": {
									"FormatType": "csv",
									"LinkedServiceName": "synaspe-northeurope-projects-WorkspaceDefaultStorage"
								}
							}
						},
						"Source": {
							"Type": "SPARK"
						}
					},
					{
						"ActionType": "CREATE",
						"OldEntity": null,
						"NewEntity": {
							"Name": "accounts",
							"EntityType": "TABLE",
							"Namespace": {
								"DatabaseName": "Database1"
							},
							"Description": "",
							"TableType": "EXTERNAL",
							"Origin": {
								"Type": "SPARK"
							},
							"StorageDescriptor": {
								"Columns": [
									{
										"Name": "account_id",
										"OriginDataTypeName": {
											"TypeName": "integer",
											"IsComplexType": false,
											"IsNullable": true,
											"Properties": {
												"HIVE_TYPE_STRING": "integer"
											}
										}
									},
									{
										"Name": "account_type",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 8000,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										}
									},
									{
										"Name": "balance",
										"OriginDataTypeName": {
											"TypeName": "decimal",
											"IsComplexType": false,
											"IsNullable": true,
											"Precision": 18,
											"Scale": 2,
											"Properties": {
												"HIVE_TYPE_STRING": "decimal"
											}
										}
									},
									{
										"Name": "open_date",
										"OriginDataTypeName": {
											"TypeName": "date",
											"IsComplexType": false,
											"IsNullable": true,
											"Properties": {
												"DateFormat": "YYYY-MM-DD",
												"HIVE_TYPE_STRING": "date"
											}
										}
									},
									{
										"Name": "account_age_years",
										"OriginDataTypeName": {
											"TypeName": "double",
											"IsComplexType": false,
											"IsNullable": true,
											"Properties": {
												"HIVE_TYPE_STRING": "double"
											}
										}
									}
								],
								"Format": {
									"InputFormat": "org.apache.hadoop.hive.ql.io.parquet.MapredParquetInputFormat",
									"OutputFormat": "org.apache.hadoop.hive.ql.io.parquet.MapredParquetOutputFormat",
									"FormatType": "parquet",
									"SerializeLib": "org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe",
									"Properties": {
										"path": "abfss://fintech@adlsaccountnortheurope.dfs.core.windows.net/Gold/fintech/dim_accounts/part-00000-8f25432d-ca9b-41e2-99bf-c3044d7cedf2-c000.snappy.parquet",
										"FormatTypeSetToDatabaseDefault": false
									}
								},
								"Source": {
									"Provider": "ADLS",
									"Location": "abfss://fintech@adlsaccountnortheurope.dfs.core.windows.net/Gold/fintech/dim_accounts/part-00000-8f25432d-ca9b-41e2-99bf-c3044d7cedf2-c000.snappy.parquet",
									"Properties": {
										"LinkedServiceName": "AzureDataLakeStorage_newproject",
										"LocationSetToDatabaseDefault": false
									}
								},
								"Properties": {
									"textinputformat.record.delimiter": ",",
									"compression": "",
									"derivedModelAttributeInfo": "{\"attributeReferences\":{}}"
								},
								"Compressed": false,
								"IsStoredAsSubdirectories": false
							},
							"Properties": {
								"Description": "",
								"DisplayFolderInfo": "{\"name\":\"Others\",\"colorCode\":\"\"}",
								"PrimaryKeys": "",
								"spark.sql.sources.provider": "parquet"
							},
							"Retention": 0,
							"Temporary": false,
							"IsRewriteEnabled": false
						},
						"Source": {
							"Type": "SPARK"
						}
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/sparkpool1')]",
			"type": "Microsoft.Synapse/workspaces/bigDataPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"autoPause": {
					"enabled": true,
					"delayInMinutes": 15
				},
				"autoScale": {
					"enabled": false,
					"maxNodeCount": 10,
					"minNodeCount": 3
				},
				"nodeCount": 3,
				"nodeSize": "Small",
				"nodeSizeFamily": "MemoryOptimized",
				"sparkVersion": "3.4",
				"isComputeIsolationEnabled": false,
				"sessionLevelPackagesEnabled": false,
				"annotations": []
			},
			"dependsOn": [],
			"location": "northeurope"
		}
	]
}