{
	"name": "Notebook 1",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "sparkpool1",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "b81da868-2535-44ec-bee7-2280e1464e93"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/4b8e657e-a5ee-47f9-85b2-8b4bf5f84802/resourceGroups/north_europe_1/providers/Microsoft.Synapse/workspaces/synaspe-northeurope-projects/bigDataPools/sparkpool1",
				"name": "sparkpool1",
				"type": "Spark",
				"endpoint": "https://synaspe-northeurope-projects.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/sparkpool1",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"microsoft": {
						"language": "python"
					}
				},
				"source": [
					"%%pyspark\n",
					"df = spark.sql(\"SELECT * FROM `Database1`.`accounts`\")\n",
					"df.show(10)"
				],
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"lake_db_path = \"abfss://fintech@adlsaccountnortheurope.dfs.core.windows.net/Gold/fintech/\"\r\n",
					"table_name = \"dim_customers\"\r\n",
					"lake_database_name = \"Database1\"  # Replace with your Lake Database name\r\n",
					"\r\n",
					"# Register the table\r\n",
					"spark.sql(f\"\"\"\r\n",
					"CREATE TABLE IF NOT EXISTS {lake_database_name}.{table_name}\r\n",
					"USING DELTA\r\n",
					"LOCATION '{lake_db_path}{table_name}'\r\n",
					"\"\"\")\r\n",
					"\r\n",
					"\r\n",
					""
				],
				"execution_count": 4
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"table_path = \"abfss://fintech@adlsaccountnortheurope.dfs.core.windows.net/Gold/fintech/dim_customers\"\r\n",
					"\r\n",
					"# Try reading the Delta table\r\n",
					"try:\r\n",
					"    df = spark.read.format(\"delta\").load(table_path)\r\n",
					"    df.show()\r\n",
					"    print(\"Delta table exists and is readable!\")\r\n",
					"except Exception as e:\r\n",
					"    print(\"Error: Delta table not found or invalid path.\")\r\n",
					"    print(e)\r\n",
					""
				],
				"execution_count": 5
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"lake_database_name = \"Database2\"\r\n",
					"table_name = \"dim_customers\"\r\n",
					"table_path = \"abfss://fintech@adlsaccountnortheurope.dfs.core.windows.net/Gold/fintech/dim_customers\"\r\n",
					"\r\n",
					"# Register the table\r\n",
					"spark.sql(f\"\"\"\r\n",
					"CREATE TABLE IF NOT EXISTS {lake_database_name}.{table_name}\r\n",
					"USING DELTA\r\n",
					"LOCATION '{table_path}'\r\n",
					"\"\"\")\r\n",
					"print(f\"Table {lake_database_name}.{table_name} registered successfully!\")\r\n",
					""
				],
				"execution_count": 10
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"lake_database_name = \"Database1\"\r\n",
					"spark.sql(f\"SHOW TABLES IN {lake_database_name}\").show()\r\n",
					""
				],
				"execution_count": 9
			}
		]
	}
}